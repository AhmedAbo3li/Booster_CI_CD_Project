pipeline {
    agent { label 'docker-slave' } // Use the Ubuntu slave you set up in Step 3
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials') // DockerHub credentials ID
        IMAGE_NAME = "ahmedabo3lii/django-app" // Replace with your DockerHub username
        IMAGE_TAG = "${env.BRANCH_NAME}-${env.BUILD_NUMBER}" // Tag with branch name and build number
    }
    stages {
        stage('Preparation') {
            steps {
                checkout scm // Check out the code from GitHub
            }
        }
        stage('Build Image') {
            steps {
                script {
                    // Build the Docker image using the Dockerfile
                    sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
                }
            }
        }
        stage('Push Image') {
            steps {
                script {
                    // Log in to DockerHub and push the image
                    sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                    sh "docker push ${IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }
        stage('Deploy') {
            steps {
                script {
                    // Stop and remove any existing container with the same name
                    sh 'docker rm -f django-app || true'
                    // Run a new container from the image
                    sh "docker run -d --name django-app -p 8000:8000 ${IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }
        stage('Notification') {
            steps {
                script {
                    // Send Slack message with build status
                    def status = currentBuild.currentResult == 'SUCCESS' ? 'succeeded' : 'failed'
                    slackSend(channel: '#jenkins-notifications', message: "Build ${env.JOB_NAME} #${env.BUILD_NUMBER} ${status}! Check it out: ${env.BUILD_URL}")
                }
            }
        }
    }
    post {
        always {
            // Clean up Docker images to save space
            sh "docker rmi ${IMAGE_NAME}:${IMAGE_TAG} || true"
        }
    }
}